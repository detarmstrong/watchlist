(-> watchlist-frame)
(-> watchlist-frame pack! show!)
(-> watchlist-frame)
(show-frame)
(autotest)
(use 'midje.sweet)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(-> status-and-note-update-issue-ex :relations)
(ns test.watchlist/t-core)
(-> status-and-note-update-issue-ex :relations)
(ns watchlist/t-core)
(-> status-and-note-update-issue-ex :relations)
(-> watchlist.t-core/status-and-note-update-issue-ex :relations)
(api/issue)
(web-api/issue)
(watchlist.web-api/issue)
(watchlist.web-api/issue 4567)
(is-related-ticket?
     5
     (convert-update status-and-note-update-issue-ex))
(watchlog.core/is-related-ticket?
5
(watchlog.core/convert-update watchlog.t-core/status-and-note-update-issue-ex))
(watchlog.core/is-related-ticket?)
(watchlist.core/is-related-ticket?)
(watchlist.core/is-related-ticket?
5
(watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex))
(convert-update status-and-note-update-issue-ex)
(watchlog.core/convert-update status-and-note-update-issue-ex)
(watchlist.core/convert-update status-and-note-update-issue-ex)
(watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex)
(:id (watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex))
(use 'midje.repl)
(autotest)
(convert-update status-and-note-update-issue-ex)
(watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex)
(watchlist.web-api/issue 34)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
[:is-author? :is-assignee?]
'(:is-author? :is-assignee?)
(symbol :x)
is-author?
(-> :is-author? resolve)
(-> :is-author? symbol resolve)
(-> :is-author? name symbol resolve)
(keyword is-author?)
(keywordize is-author?)
(name is-author?)
(name 'is-author?)
(name (quote is-author?))
(keyword (quote is-author?))
(-> :is-author? name symbol resolve)
(reduce (fn [accum val]
(defn x [])
x
(defn x [] x)
x
(name x)
(:name (meta x))
(:name (meta #x))
(:name (meta #'x))
(:name (meta x))
(meta x)
(keyword (quote x))
(keyword x)
(keyword 'x)
(name)
(name x)
(defn symbol-as-string [sym] (str (second `(name ~sym)))
(defn symbol-as-string [sym] (str (second '(name ~sym)))
(defn symbol-as-string [sym] (str (second '(name ~sym))))
(symbol-as-string x)
(meta #x)
(meta #x))
(meta #'x)
(:name (meta #'x)
)
(take-while identity '(false false true))
(take-while identity '(true false false true))
(take-while (fn [in] (not in)) '(true false false true))
(take-while (fn [in] (not in)) '(false false true))
drop-while (fn [in] (not in)) '(false false true))
(drop-while (fn [in] (not in)) '(false false true))
(map first [])
(mapv first [[:x]])
(mapv first [:x])
(use 'midje.repl)
(autotest)
(start-app)
(def watchlist-frame
    (frame
      :title "WatchList"
      :on-close :exit
      :content (frame-content)
      :size [500 :by 700]
      :minimum-size [400 :by 500]
      :icon "logo.png")
]
(def watchlist-frame
    (frame
      :title "WatchList"
      :on-close :exit
      :content (frame-content)
      :size [500 :by 700]
      :minimum-size [400 :by 500]
      :icon "logo.png"))
(start-app)
(defn set-update-items-list-ui [from-date]
  (set-last-update-ts (time-core/now))
  (set-fetching-updates true)
  (future
    (let [issue-updates (get-issue-updates from-date)
          merged-items (merge-updates
                         ; Dispose of previous tagging - this is useful
                         ; if the user unchecks an update type
                         (mapv
                           first
                           @master-updates)
                         issue-updates)
          tagged-items (tag-updates
                         merged-items
                         (build-preds-from-filter-options
                           (-> @preferences :filter-options)))
          filtered-items (filterv
                           is-tagged-item?
                           tagged-items)
          built-items (mapv
                        build-update-row
                        filtered-items)]
      (set-master-updates filtered-items)
      (invoke-later
        (config!
          (select
            watchlist-frame
            [:#updates-panel])
          :items built-items))
      ; terrible hack to get the damn ui to correct itself
      ; after reloading the items (large whitespace between rows)
      (seesaw.timer/timer
        (fn [e]
          (-> (select watchlist-frame [:#updates-panel]) (.revalidate)))
        :initial-delay 10
        :repeats? false)
(def watchlist-frame
    (frame
      :title "WatchList"
      :on-close :exit
      :content (frame-content)
      :size [500 :by 700]
      :minimum-size [400 :by 500]
      :icon "logo.png"))
(start-app)
(def watchlist-frame
    (frame
      :title "WatchList"
      :on-close :exit
      :content (frame-content)
      :size [500 :by 700]
      :minimum-size [400 :by 500]
      :icon "logo.png"))
(start-app)
(api/issue
               (get-in ws [:url])
               (get-in ws [:api-token])
               (get-in % [:id]))))
(api/issue
(get-in ws [:url])
(get-in ws [:api-token])
14374)
(ws-do
@preferences
(fn [ws]
(api/issue
(get-in ws [:url])
(get-in ws [:api-token])
14374)
)
(ws-do
                                  (get-preferences)
                                  (fn [ws]
                                    (api/get-user-by-id
                                      (get-in ws [:url])
                                      (get-in ws [:api-token])
                                      149)))
(ws-do
                                  (get-preferences)
                                  (fn [ws]
                                    (api/get-user-by-id
                                      (get-in ws [:url])
                                      (get-in ws [:api-token])
                                      61)))
(def watchlist-frame
    (frame
      :title "WatchList"
      :on-close :exit
      :content (frame-content)
      :size [500 :by 700]
      :minimum-size [400 :by 500]
      :icon "logo.png"))
(start-app)
