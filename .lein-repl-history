(-> watchlist-frame)
(-> watchlist-frame pack! show!)
(-> watchlist-frame)
(show-frame)
(autotest)
(use 'midje.sweet)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(-> status-and-note-update-issue-ex :relations)
(ns test.watchlist/t-core)
(-> status-and-note-update-issue-ex :relations)
(ns watchlist/t-core)
(-> status-and-note-update-issue-ex :relations)
(-> watchlist.t-core/status-and-note-update-issue-ex :relations)
(api/issue)
(web-api/issue)
(watchlist.web-api/issue)
(watchlist.web-api/issue 4567)
(is-related-ticket?
     5
     (convert-update status-and-note-update-issue-ex))
(watchlog.core/is-related-ticket?
5
(watchlog.core/convert-update watchlog.t-core/status-and-note-update-issue-ex))
(watchlog.core/is-related-ticket?)
(watchlist.core/is-related-ticket?)
(watchlist.core/is-related-ticket?
5
(watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex))
(convert-update status-and-note-update-issue-ex)
(watchlog.core/convert-update status-and-note-update-issue-ex)
(watchlist.core/convert-update status-and-note-update-issue-ex)
(watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex)
(:id (watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex))
(use 'midje.repl)
(autotest)
(convert-update status-and-note-update-issue-ex)
(watchlist.core/convert-update watchlist.t-core/status-and-note-update-issue-ex)
(watchlist.web-api/issue 34)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
[:is-author? :is-assignee?]
'(:is-author? :is-assignee?)
(symbol :x)
is-author?
(-> :is-author? resolve)
(-> :is-author? symbol resolve)
(-> :is-author? name symbol resolve)
(keyword is-author?)
(keywordize is-author?)
(name is-author?)
(name 'is-author?)
(name (quote is-author?))
(keyword (quote is-author?))
(-> :is-author? name symbol resolve)
(reduce (fn [accum val]
(defn x [])
x
(defn x [] x)
x
(name x)
(:name (meta x))
(:name (meta #x))
(:name (meta #'x))
(:name (meta x))
(meta x)
(keyword (quote x))
(keyword x)
(keyword 'x)
(name)
(name x)
(defn symbol-as-string [sym] (str (second `(name ~sym)))
(defn symbol-as-string [sym] (str (second '(name ~sym)))
(defn symbol-as-string [sym] (str (second '(name ~sym))))
(symbol-as-string x)
(meta #x)
(meta #x))
(meta #'x)
(:name (meta #'x)
)
(take-while identity '(false false true))
(take-while identity '(true false false true))
(take-while (fn [in] (not in)) '(true false false true))
(take-while (fn [in] (not in)) '(false false true))
drop-while (fn [in] (not in)) '(false false true))
(drop-while (fn [in] (not in)) '(false false true))
(map first [])
(mapv first [[:x]])
(mapv first [:x])
